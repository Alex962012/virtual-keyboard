(() => {
  const t = {
    902: (t, e, n) => { n.d(e, { Z: () => i }); const r = n(81); const o = n.n(r); const a = n(645); const c = n.n(a)()(o()); c.push([t.id, 'body{\r\n    margin: 0px;\r\n    padding: 0px;\r\n}\r\n.wrapper{\r\n    margin: 0 auto;\r\n    background-color: aqua;\r\n    width: 97%;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    padding: 20px;\r\n}\r\nh1{\r\n    text-align: center;\r\n    color: red;\r\n}\r\ntextarea{\r\n    height: 200px;\r\n}\r\n.keyboard{\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    flex-direction: row;\r\n    justify-content: center;\r\n    border:  2px solid black;\r\n    padding: 5px;\r\n    background-color: white;\r\n}\r\n.key{\r\n    text-align: center;\r\n    margin: 5px;\r\n    width: 50px;\r\n    height: 50px;\r\n    padding: 3px;\r\n    border: 2px solid black;\r\n}\r\n.key:hover{\r\n    background-color: antiquewhite;\r\n}\r\n.active{\r\n    background-color: antiquewhite; \r\n}\r\n.clearfix{\r\n    display: block;\r\n    width: 100%;\r\n    clear: both;\r\n}\r\n.space{\r\n    width: 450px;\r\n    height: 50px;\r\n}\r\nselect{\r\n    width: 400px;\r\n  \r\n}\r\n.tab,.capslock ,.backspace{\r\n    width: 100px;\r\n    height: 50px;\r\n}\r\n.enter{\r\n    width: 50px;\r\n    height: 50px;\r\n}\r\n.shift{\r\n    width: 110px;\r\n    height: 50px;\r\n}', '']); const i = c; },
    645: (t) => { t.exports = function (t) { const e = []; return e.toString = function () { return this.map(((e) => { let n = ''; const r = void 0 !== e[5]; return e[4] && (n += '@supports ('.concat(e[4], ') {')), e[2] && (n += '@media '.concat(e[2], ' {')), r && (n += '@layer'.concat(e[5].length > 0 ? ' '.concat(e[5]) : '', ' {')), n += t(e), r && (n += '}'), e[2] && (n += '}'), e[4] && (n += '}'), n; })).join(''); }, e.i = function (t, n, r, o, a) { typeof t === 'string' && (t = [[null, t, void 0]]); const c = {}; if (r) for (let i = 0; i < this.length; i++) { const s = this[i][0]; s != null && (c[s] = !0); } for (let l = 0; l < t.length; l++) { const d = [].concat(t[l]); r && c[d[0]] || (void 0 !== a && (void 0 === d[5] || (d[1] = '@layer'.concat(d[5].length > 0 ? ' '.concat(d[5]) : '', ' {').concat(d[1], '}')), d[5] = a), n && (d[2] ? (d[1] = '@media '.concat(d[2], ' {').concat(d[1], '}'), d[2] = n) : d[2] = n), o && (d[4] ? (d[1] = '@supports ('.concat(d[4], ') {').concat(d[1], '}'), d[4] = o) : d[4] = ''.concat(o)), e.push(d)); } }, e; }; },
    81: (t) => { t.exports = function (t) { return t[1]; }; },
    379: (t) => {
      const e = []; function n(t) { for (var n = -1, r = 0; r < e.length; r++) if (e[r].identifier === t) { n = r; break; } return n; } function r(t, r) {
        for (var a = {}, c = [], i = 0; i < t.length; i++) {
          const s = t[i]; const l = r.base ? s[0] + r.base : s[0]; const d = a[l] || 0; const u = ''.concat(l, ' ').concat(d); a[l] = d + 1; const p = n(u); const f = {
            css: s[1], media: s[2], sourceMap: s[3], supports: s[4], layer: s[5],
          }; if (p !== -1)e[p].references++, e[p].updater(f); else { const h = o(f, r); r.byIndex = i, e.splice(i, 0, { identifier: u, updater: h, references: 1 }); }c.push(u);
        } return c;
      } function o(t, e) { const n = e.domAPI(e); return n.update(t), function (e) { if (e) { if (e.css === t.css && e.media === t.media && e.sourceMap === t.sourceMap && e.supports === t.supports && e.layer === t.layer) return; n.update(t = e); } else n.remove(); }; }t.exports = function (t, o) { let a = r(t = t || [], o = o || {}); return function (t) { t = t || []; for (let c = 0; c < a.length; c++) { const i = n(a[c]); e[i].references--; } for (var s = r(t, o), l = 0; l < a.length; l++) { const d = n(a[l]); e[d].references === 0 && (e[d].updater(), e.splice(d, 1)); }a = s; }; };
    },
    569: (t) => { const e = {}; t.exports = function (t, n) { const r = (function (t) { if (void 0 === e[t]) { let n = document.querySelector(t); if (window.HTMLIFrameElement && n instanceof window.HTMLIFrameElement) try { n = n.contentDocument.head; } catch (t) { n = null; }e[t] = n; } return e[t]; }(t)); if (!r) throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid."); r.appendChild(n); }; },
    216: (t) => { t.exports = function (t) { const e = document.createElement('style'); return t.setAttributes(e, t.attributes), t.insert(e, t.options), e; }; },
    565: (t, e, n) => { t.exports = function (t) { const e = n.nc; e && t.setAttribute('nonce', e); }; },
    795: (t) => { t.exports = function (t) { const e = t.insertStyleElement(t); return { update(n) { !(function (t, e, n) { let r = ''; n.supports && (r += '@supports ('.concat(n.supports, ') {')), n.media && (r += '@media '.concat(n.media, ' {')); const o = void 0 !== n.layer; o && (r += '@layer'.concat(n.layer.length > 0 ? ' '.concat(n.layer) : '', ' {')), r += n.css, o && (r += '}'), n.media && (r += '}'), n.supports && (r += '}'); const a = n.sourceMap; a && typeof btoa !== 'undefined' && (r += '\n/*# sourceMappingURL=data:application/json;base64,'.concat(btoa(unescape(encodeURIComponent(JSON.stringify(a)))), ' */')), e.styleTagTransform(r, t, e.options); }(e, t, n)); }, remove() { !(function (t) { if (t.parentNode === null) return !1; t.parentNode.removeChild(t); }(e)); } }; }; },
    589: (t) => { t.exports = function (t, e) { if (e.styleSheet)e.styleSheet.cssText = t; else { for (;e.firstChild;)e.removeChild(e.firstChild); e.appendChild(document.createTextNode(t)); } }; },
  }; const e = {}; function n(r) { const o = e[r]; if (void 0 !== o) return o.exports; const a = e[r] = { id: r, exports: {} }; return t[r](a, a.exports, n), a.exports; }n.n = (t) => { const e = t && t.__esModule ? () => t.default : () => t; return n.d(e, { a: e }), e; }, n.d = (t, e) => { for (const r in e)n.o(e, r) && !n.o(t, r) && Object.defineProperty(t, r, { enumerable: !0, get: e[r] }); }, n.o = (t, e) => Object.prototype.hasOwnProperty.call(t, e), (() => { const t = n(379); const e = n.n(t); const r = n(795); const o = n.n(r); const a = n(569); const c = n.n(a); const i = n(565); const s = n.n(i); const l = n(216); const d = n.n(l); const u = n(589); const p = n.n(u); const f = n(902); const h = {}; h.styleTagTransform = p(), h.setAttributes = s(), h.insert = c().bind(null, 'head'), h.domAPI = o(), h.insertStyleElement = d(), e()(f.Z, h), f.Z && f.Z.locals && f.Z.locals, document.querySelectorAll; const { body: v } = document; const m = document.createElement('div'); const x = document.createElement('textarea'); const y = document.createElement('div'); const C = document.createElement('select'); const L = document.createElement('option'); L.textContent = 'EN', L.classList.add('speak'), L.setAttribute('value', 'EN'); const g = document.createElement('option'); g.textContent = 'RU', g.classList.add('speak'), g.setAttribute('value', 'RU'), m.classList.add('wrapper'), y.classList.add('keyboard'), v.append(m); const k = document.createElement('h1'); k.textContent = 'Virtual Keyboard', C.append(L), C.append(g), m.append(k), m.append(C), C.style.display = 'none', x.classList.add('textarea'), x.setAttribute('autofocus', 'autofocus'), x.setAttribute('readonly', 'readonly'), m.append(x), m.append(y), document.querySelectorAll('.speak'); const w = [96, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 45, 61, 'Backspace', 'Tab', 113, 119, 101, 114, 116, 121, 117, 105, 111, 112, 91, 93, 'Delete', 'CapsLock', 97, 115, 100, 102, 103, 104, 106, 107, 108, 59, 39, 92, 13, 'ShiftLeft', 122, 120, 99, 118, 98, 110, 109, 44, 46, 47, 'ArrowUp', 'ShiftRight', 'ControlLeft', 'MetaLeft', 'AltLeft', 32, 'AltRight', 'ArrowLeft', 'ArrowDown', 'ArrowRight', 'ControlRight']; const b = [96, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 45, 61, 'Backspace', 'Tab', 81, 87, 69, 82, 84, 89, 85, 73, 79, 80, 91, 93, 'Delete', 'CapsLock', 65, 83, 68, 70, 71, 72, 74, 75, 76, 59, 39, 92, 13, 'ShiftLeft', 90, 88, 67, 86, 66, 78, 77, 44, 46, 47, 'ArrowUp', 'ShiftRight', 'ControlLeft', 'MetaLeft', 'AltLeft', 32, 'AltRight', 'ArrowLeft', 'ArrowDown', 'ArrowRight', 'ControlRight']; const A = [1105, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 45, 61, 'Backspace', 'Tab', 1081, 1094, 1091, 1082, 1077, 1085, 1075, 1096, 1097, 1079, 1093, 1098, 'Delete', 'CapsLock', 1092, 1099, 1074, 1072, 1087, 1088, 1086, 1083, 1076, 1078, 1101, 92, 13, 'ShiftLeft', 1103, 1095, 1089, 1084, 1080, 1090, 1100, 1073, 1102, 46, 'ArrowUp', 'ShiftRight', 'ControlLeft', 'MetaLeft', 'AltLeft', 32, 'AltRight', 'ArrowLeft', 'ArrowDown', 'ArrowRight', 'ControlRight']; const S = [1025, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 45, 61, 'Backspace', 'Tab', 1049, 1062, 1059, 1050, 1045, 1053, 1043, 1064, 1065, 1047, 1061, 1066, 'Delete', 'CapsLock', 1060, 1067, 1042, 1040, 1055, 1056, 1054, 1051, 1044, 1046, 1069, 92, 13, 'ShiftLeft', 1071, 1063, 1057, 1052, 1048, 1058, 1068, 1041, 1070, 46, 'ArrowUp', 'ShiftRight', 'ControlLeft', 'MetaLeft', 'AltLeft', 32, 'AltRight', 'ArrowLeft', 'ArrowDown', 'ArrowRight', 'ControlRight']; function R(t) { y.innerHTML = ''; for (const e of t) { const t = document.createElement('div'); const n = document.createElement('div'); n.classList.add('clearfix'), t.classList.add('key'), t.dataset.key = e, e == 'Delete' || e == 'Enter' ? t.textContent = e : e == 'Tab' ? (t.textContent = 'Tab', t.classList.add('tab')) : e == 13 ? (t.textContent = 'Enter', t.classList.add('enter')) : e == 32 ? (t.textContent = ' ', t.classList.add('space')) : e == 'Backspace' ? (t.textContent = 'Backspace', t.classList.add('backspace')) : e == 'ShiftLeft' || e == 'ShiftRight' ? (t.textContent = 'Shift', t.classList.add('shiftleft')) : e == 'ShiftRight' ? (t.textContent = 'Shift', t.classList.add('shiftright')) : e == 'ControlLeft' ? (t.textContent = 'Ctrl', t.classList.add('controlleft')) : e == 'ControlRight' ? (t.textContent = 'Ctrl', t.classList.add('controlright')) : e == 'CapsLock' ? (t.textContent = 'CapsLock', t.classList.add('capslock')) : t.textContent = e == 'AltLeft' ? 'Alt' : e == 'MetaLeft' ? 'Win' : e == 'AltRight' ? 'Alt' : e == 'ArrowUp' ? '▲' : e == 'ArrowLeft' ? '◄' : e == 'ArrowRight' ? '►' : e == 'ArrowDown' ? '▼' : String.fromCharCode(e), e == 8 || t.textContent === 'Delete' || e === 13 || t.textContent === 'Backspace' || t.dataset.key === 'ShiftRight' ? (y.append(t), y.append(n)) : y.append(t); } }R(w), T(), document.querySelectorAll('.key'), document.onkeypress = function (t) { t.code != 'Enter' && t.code != 'Tab' && t.code != 'Backspace' && t.code != 'Control' && (x.value += document.querySelector(`.key[data-key='${t.keyCode}']`).textContent, document.querySelector(`.key[data-key='${t.keyCode}']`).classList.add('active'), setTimeout((() => { document.querySelector(`.key[data-key='${t.keyCode}']`).classList.remove('active'); }), 600)); }; let E = 0; function T() { const t = document.querySelectorAll('.key'); for (const e of t)e.addEventListener('click', (() => { e.textContent == 'Enter' ? x.value += '\n' : e.textContent == 'Tab' ? x.value += '    ' : e.textContent == 'Backspace' ? x.value = x.value.slice(0, -1) : x.value += e.textContent; })); }document.onkeydown = function (t) { if (t.code == 'ArrowUp' || t.code == 'ArrowDown' || t.code == 'ArrowRight' || t.code == 'ArrowLeft') { const e = document.querySelector(`.key[data-key="${t.code}"]`); x.value += e.textContent, e.classList.add('active'), setTimeout((() => { e.classList.remove('active'); }), 600); } else t.code == 'Enter' ? (x.value += '\n', document.querySelector('.enter').classList.add('active'), setTimeout((() => { document.querySelector('.enter').classList.remove('active'); }), 600)) : t.code == 'Tab' ? (x.value += '    ', document.querySelector('.tab').classList.add('active'), setTimeout((() => { document.querySelector('.tab').classList.remove('active'); }), 600)) : t.code == 'Backspace' ? (x.value = x.value.slice(0, -1), document.querySelector('.backspace').classList.add('active'), setTimeout((() => { document.querySelector('.backspace').classList.remove('active'); }), 600)) : t.code == 'ControlLeft' ? (x.value += '', document.querySelector('.controlleft').classList.add('active'), setTimeout((() => { document.querySelector('.controlleft').classList.remove('active'); }), 600)) : t.code == 'ControlRight' ? (x.value += '', document.querySelector('.controlright').classList.add('active'), setTimeout((() => { document.querySelector('.controlright').classList.remove('active'); }), 600)) : t.code == 'ShiftLeft' ? (function () { const t = document.querySelectorAll('.key'); for (const e of t)e.textContent === 'Backspace' || e.textContent === 'Tab' || e.textContent === 'Delete' || e.textContent === 'CapsLock' || e.textContent === 'Enter' || e.textContent === 'Shift' || e.textContent === 'Ctrl' || e.textContent === 'Win' || e.textContent === 'Alt' || (e.textContent = e.textContent.toUpperCase()); document.onkeyup = function (t) { const e = document.querySelectorAll('.key'); for (const t of e)t.textContent === 'Backspace' || t.textContent === 'Tab' || t.textContent === 'Delete' || t.textContent === 'CapsLock' || t.textContent === 'Enter' || t.textContent === 'Shift' || t.textContent === 'Ctrl' || t.textContent === 'Win' || t.textContent === 'Alt' || (t.textContent = t.textContent.toLowerCase()), document.querySelector('.shiftleft').classList.remove('active'); }; }()) : t.code == 'CapsLock' && (C.value == 'EN' && (R(b), E++, console.log(E), E > 1 && (E = 0, R(w))), C.value == 'RU' && (R(S), E++, console.log(E), E > 1 && (E = 0, R(A)))); }, (function (t, ...e) { const n = new Set(); document.addEventListener('keydown', ((r) => { n.add(r.code); for (const t of e) if (!n.has(t)) return; n.clear(), t(); })), document.addEventListener('keyup', ((t) => { n.delete(t.code); })); }((() => { R(C.value == 'EN' ? (C.value = 'RU', A) : C.value == 'RU' ? (C.value = 'EN', w) : void 0), T(); }), 'AltLeft', 'ShiftLeft')); })();
})();
